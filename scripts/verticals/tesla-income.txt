{
  "id": 5001803,
  "steps": [
    {
      "id": 0,
      "name": "iris",
      "label": "Dataset",
      "params": {},
      "error": "",
      "metadata": {
        "params": [],
        "input": [
          "data"
        ],
        "deps": [],
        "output": [
          "data"
        ]
      },
      "script": "data = [\n  { year: 2020,\tincome: 690 },\n  { year: 2019, income: -870 },\n  { year: 2018, income: -976 },\n  { year: 2017, income: -1962 },\n  { year: 2016, income: -675 },\n  { year: 2015, income: -889 },\n  { year: 2014, income: -294 },\n  { year: 2013, income: -74 },\n  { year: 2012, income: -396 },\n  { year: 2011, income: -254 },\n  { year: 2010, income: -154 },\n  { year: 2009, income: -56 },\n  { year: 2008, income: -83 },\n]"
    },
    {
      "id": 10001,
      "name": "sort",
      "label": "Sort",
      "params": {
        "field": {
          "id": 0,
          "static": false,
          "value": [
            {
              "id": 2,
              "name": "year",
              "label": "year"
            }
          ],
          "name": "field",
          "label": "Field"
        },
        "order": {
          "id": 2,
          "static": true,
          "value": [
            {
              "control": "select",
              "value": "asc",
              "values": [
                {
                  "name": "asc",
                  "label": "Ascending"
                },
                {
                  "name": "desc",
                  "label": "Descending"
                }
              ],
              "id": 1
            }
          ],
          "name": "order",
          "label": "Order"
        }
      },
      "error": "",
      "metadata": {
        "params": [
          {
            "name": "field",
            "label": "Field"
          },
          {
            "name": "order",
            "label": "Order",
            "value": [
              {
                "control": "select",
                "value": "asc",
                "values": [
                  {
                    "name": "asc",
                    "label": "Ascending"
                  },
                  {
                    "name": "desc",
                    "label": "Descending"
                  }
                ],
                "id": 0
              }
            ]
          }
        ],
        "input": [
          "data"
        ],
        "deps": [],
        "environment": null,
        "cache": false,
        "invalid": null,
        "output": [
          "data"
        ]
      },
      "script": "/**\n  params:\n    - name: field\n      label: Field\n    - name: order\n      label: Order\n      value:\n        - control: select\n          value: asc\n          values:\n            - name: asc\n              label: Ascending\n            - name: desc\n              label: Descending\n**/\n\nif (field == undefined) field = []\nif (!Array.isArray(field)) field = [ field ];\n \ndata.sort(function(a,b) {\n  var result = 0\n  for (let i = 0; i < field.length; i++) {\n    var left = a[field[i]];\n    var right = b[field[i]];\n    result = order == 'asc' ? left - right : right - left;\n    if (result != 0) break\n  }\n  return result;\n})"
    },
    {
      "label": "Waterfall",
      "name": "custom",
      "id": 10000,
      "params": {
        "x": {
          "id": 0,
          "static": false,
          "value": [
            {
              "id": 11,
              "name": "year",
              "label": "year"
            }
          ],
          "name": "x",
          "label": "x"
        },
        "y": {
          "id": 1,
          "static": false,
          "value": [
            {
              "id": 12,
              "name": "income",
              "label": "income"
            }
          ],
          "name": "y",
          "label": "y"
        }
      },
      "error": "",
      "metadata": {
        "output": [
          "html"
        ],
        "params": [
          {
            "name": "x",
            "label": "x"
          },
          {
            "name": "y",
            "label": "y"
          }
        ],
        "deps": [
          "https://cdn.jsdelivr.net/npm/d3@6",
          "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.1"
        ],
        "author": "analyzer2004",
        "input": [
          "data"
        ],
        "environment": null,
        "cache": false,
        "invalid": null
      },
      "script": "/**\n  output: [html]\n  params:\n    - name: x\n      label: x\n    - name: y\n      label: y\n  deps: [\n    'https://cdn.jsdelivr.net/npm/d3@6',\n    'https://cdn.jsdelivr.net/npm/@observablehq/plot@0.1',\n  ]\n  author: analyzer2004\n**/\n\nif (y && !Array.isArray(y)) y = [y];\nif (!y) y = [];\n\nconst totalIdx = data.length - 1;\n\nfmt = n => d3.format(\",d\")(n)\n\nplotLabel = (data, dy) => \n  Plot.text(data, {\n    x: \"x\",\n    y: \"accu\",\n    dy: dy,\n    fontWeight: \"bold\",\n    text: d => d3.format(\".2s\")(d.accu)\n  })\n\nlet last = 0, accu = 0;  \nconst waterfall = data.map((d, i) => {\n  last = accu;\n  accu += d[y];\n  return {\n    x: d[x],\n    nextX: i < totalIdx ? data[i + 1][x] : \"Total\",\n    prior: last,\n    accu: accu,\n    delta: d[y]\n  }    \n});\n\nwaterfall.push({\n  x: \"Total\",\n  nextX: null,\n  prior: 0,\n  accu: accu,\n  delta: 0\n});\n\nconst chartdata = x && y.length\n ? y.reduce((res, yv, i) => {\n     data.forEach(v => {\n       res.push({\n         x: v.x,\n         y: parseFloat(v[yv]),\n         z: `y${i}`,\n       });\n     });\n     return res;\n   }, [])\n : [];\n\nconst colorDomain = [\"Increase\", \"Decrease\", \"Total\"];\nconst colorRange = [\"#649334\", \"#cc392b\", \"#1f77b4\"];\n  \nconst plot = Plot.plot({\n  width: html.clientWidth,\n  height: html.clientHeight,\n  x: {\n    align: 0,    \n    round: false,\n    domain: waterfall.map(d => d.x)\n  },\n  y: {\n    grid: true,\n    nice: true,      \n    label: \"\",      \n    tickFormat: d3.format(\".2s\")\n  },\n  color: {\n    domain: colorDomain,\n    range: colorRange\n  },\n  marks: [   \n    Plot.barY(waterfall, {\n      x: \"x\",\n      y1: \"prior\",\n      y2: \"accu\",        \n      fill: d => d.x === \"Total\" ? \"Total\" : d.delta >= 0 ? \"Increase\" : \"Decrease\",\n    }),\n    Plot.ruleY(waterfall, {\n      x1: \"x\",\n      x2: \"nextX\",\n      y: \"accu\",        \n      strokeDasharray: \"1.5\"\n    }),\n    Plot.ruleY([0], {strokeDasharray: \"1.5\"}),\n    plotLabel(waterfall.filter(d => d.delta >= 0), \"-0.5em\"),\n    plotLabel(waterfall.filter(d => d.delta < 0), \"1.5em\")\n  ],\n  style: {\n    background: hal9.isDark() ? \"#222\" : '',\n    color: hal9.isDark() ? \"#aaa\" : ''\n  },\n})\n  \nhtml.appendChild(plot);\n"
    }
  ],
  "params": {
    "0": {},
    "10000": {
      "x": {
        "id": 0,
        "static": false,
        "value": [
          {
            "id": 11,
            "name": "year",
            "label": "year"
          }
        ],
        "name": "x",
        "label": "x"
      },
      "y": {
        "id": 1,
        "static": false,
        "value": [
          {
            "id": 12,
            "name": "income",
            "label": "income"
          }
        ],
        "name": "y",
        "label": "y"
      }
    },
    "10001": {
      "field": {
        "id": 0,
        "static": false,
        "value": [
          {
            "id": 2,
            "name": "year",
            "label": "year"
          }
        ],
        "name": "field",
        "label": "Field"
      },
      "order": {
        "id": 2,
        "static": true,
        "value": [
          {
            "control": "select",
            "value": "asc",
            "values": [
              {
                "name": "asc",
                "label": "Ascending"
              },
              {
                "name": "desc",
                "label": "Descending"
              }
            ],
            "id": 1
          }
        ],
        "name": "order",
        "label": "Order"
      }
    },
    "-1": {}
  },
  "outputs": {
    "0": [
      {
        "id": 0,
        "name": "year",
        "label": "year"
      },
      {
        "id": 1,
        "name": "income",
        "label": "income"
      }
    ],
    "10001": [
      {
        "id": 0,
        "name": "year",
        "label": "year"
      },
      {
        "id": 1,
        "name": "income",
        "label": "income"
      }
    ]
  },
  "errors": {
    "0": "",
    "10000": "",
    "10001": ""
  },
  "scripts": {
    "0": "data = [\n  { year: 2020,\tincome: 690 },\n  { year: 2019, income: -870 },\n  { year: 2018, income: -976 },\n  { year: 2017, income: -1962 },\n  { year: 2016, income: -675 },\n  { year: 2015, income: -889 },\n  { year: 2014, income: -294 },\n  { year: 2013, income: -74 },\n  { year: 2012, income: -396 },\n  { year: 2011, income: -254 },\n  { year: 2010, income: -154 },\n  { year: 2009, income: -56 },\n  { year: 2008, income: -83 },\n]",
    "902": "/**\n  input: []\n  params:\n    - name: url\n      label: 'URL'\n      value:\n        - control: 'textbox'\n          value: 'https://news.ycombinator.com/'\n          lazy: true\n    - name: text\n      label: 'Table Text'\n      value:\n        - control: 'textbox'\n          value: '1.'\n          lazy: true\n    - name: hasHeader\n      label: 'Has Header'\n      value:\n        - control: 'select'\n          value: 'yes'\n          values:\n            - name: 'yes'\n              label: Yes\n            - name: 'no'\n              label: No\n    - name: scrollIters\n      label: 'Scroll Iterations'\n      value:\n        - control: 'number'\n          value: 2\n          lazy: true\n  output:\n    - data\n    - screenshot\n    - log\n  environment: worker\n  deps: ['d3.v6.min.js']\n  cache: true\n**/\n\nconst browser = await puppeteer.launch({\n  headless: true,\n  args: [\n    '--no-sandbox',\n    '--disable-setuid-sandbox',\n    '--lang=en-US'\n  ]\n});\n\nconst page = await browser.newPage();\nconst width = 1440;\nconst height = 820;\n\nawait page.setRequestInterception(false);\nawait page.setDefaultNavigationTimeout(0);\nawait page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36');\nawait page.setViewport({\n  width: width,\n  height: height,\n  // reduce scale factor to reduce screenshot size\n  deviceScaleFactor: 0.5,\n});\n\nawait page.setExtraHTTPHeaders({ 'Accept-Language': 'en-US' });\nawait page.goto(url, {\n  waitUntil: 'domcontentloaded',\n  timeout: 10000 + scrollIters * 10\n});\n\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\nwhile(scrollIters > 1) {\n  await page.evaluate(() => {\n    window.scrollTo(0, document.documentElement.scrollTop + document.body.offsetHeight/2);\n  }, );\n\n  scrollIters = scrollIters - 1;\n  await sleep(100);\n}\n\nvar [ table, log, error ]  = await page.evaluate((text, hasHeader) => {\n  var log = [];\n\n  try {\n    var element = [...document.querySelectorAll('*')].find(el => el.innerText && el.innerText.trim() === text.trim());\n\n    if (!element) {\n      log.push('Could not find table with exact text in given row');\n      element = [...document.querySelectorAll('*')].find(el => el.children.length == 0 && el.innerText && el.innerText.includes(text.trim()));\n\n      if (!element) {\n        log.push('Could not find table with exact text in given leaf node');\n        element = [...document.querySelectorAll('*')].filter(el => el.innerText && el.innerText.includes(text.trim()));\n        \n        if (element.length == 0) {\n          log.push('Could not find table with the given text');\n          return [ '', log ];\n        }\n\n        element = element[element.length - 1];\n      }\n    };\n\n    if (element.tagName === 'TD' || element.tagName === 'TH') {\n      log.push('There is an actual table in html code');\n\n      const table = element.closest('table');\n      if (!table) {\n        log.push('Could not find closest table');\n        return [ '', log ];\n      }\n\n      var [header, ...rows] = [...table.querySelectorAll('tr')];\n      if (!hasHeader) {\n        rows = [...table.querySelectorAll('tr')];\n\n        if (rows.length > 0) {\n          log.push('Header has ' + rows[0].querySelectorAll('td, th').length + ' columns');\n        }\n      }\n\n      const colsMax = Math.max(...rows.map(row => row.querySelectorAll('td, th').length));\n      const colsIndexes = Array.from(Array(colsMax).keys());\n\n      const tableRows = rows\n        .map(row => [...row.querySelectorAll('td, th')].map(el => {\n          const img = el.querySelector('img');\n          return img ? img.src : el.innerText.replace(/\\n/g, ' ');\n        }))\n        .filter(r => r.length > 0)\n      \n      log.push('Found ' + tableRows.length + ' rows in table');\n\n      var textHeader = [...header.querySelectorAll('td, th')]\n        .map(el => el.innerText.replace(/\\n/g, ' '))\n        .join('§');\n      if (!hasHeader && tableRows.length > 0) {\n        textHeader = colsIndexes.map((i) => 'column' + (i+1)).join('§');\n      }\n\n      return [ textHeader + '\\n' + tableRows.map(e => e.join('§')).join('\\n'), log ];\n    } else {\n      log.push('Text is not inside a td element so we want to guess the table structure for ' + element.nodeName);\n\n      const textClassName = element.classList[0];\n\n      if (!textClassName) {\n        log.push('Tables without classes are unsupported');\n        return [ '', log ];\n      }\n\n      log.push('Using class ' + textClassName + ' to extract data');\n\n      // Get all desired elements and their parents structure\n      const allElements = [...document.querySelectorAll(`${element.tagName}.${textClassName}`)];\n      const headless = allElements.length === 1 || allElements[0].className === allElements[1].className;\n      let fullStructure = allElements.map(el => {\n        const nodes = [];\n        while(el.parentNode) {\n          nodes.unshift(el.parentNode);\n          el = el.parentNode;\n        }\n        return nodes;\n      });\n\n      // If structure is of different length then filter by most common one\n      const structureLength = fullStructure.reduce((res, { length }) => {\n        if (res[length]) res[length] += 1;\n        else res[length] = 1;\n        return res;\n      }, {});\n      const sortedStructureLength = Object.keys(structureLength)\n        .sort((a, b) => structureLength[b] - structureLength[a]);\n\n      fullStructure = fullStructure.filter(el => el.length === parseInt(sortedStructureLength[0]));\n\n      // Get all direct desired children\n      const sliceIndex = fullStructure[0].reduce((res, _, i) => {\n        const array = fullStructure.map(el => el[i]);\n        const hasEquals = array.some((val, j) => array.indexOf(val) !== j);\n\n        if (hasEquals) res = i;\n        return res;\n      }, 0);\n      const structure = fullStructure.map(sel => sel[sliceIndex + 1]);\n\n      // Go from top to bottom to get full structure on end nodes\n      const getChildren = (res, node) => {\n        if (node.children.length) {\n          [...node.children].forEach(child => getChildren(res, child));\n          return res;\n        } else {\n          if (node.className) {\n            res.push({\n              tag: node.tagName,\n              class: node.className,\n              value: node.tagName === 'IMG' ? node.src : node.parentNode.innerText,\n            });\n          }\n          return res;\n        }\n      };\n\n      const resultStructure = structure.map(sel => {\n        return getChildren([], sel).filter((value, index, self) =>\n          value.class && self.findIndex(v => v.value === value.value) === index);\n      });\n\n      // Map the structure to rows and columns of the result table\n      const uniqueStructure = resultStructure.reduce((res, rel) => {\n        rel.forEach(el => {\n          const prop = `${el.tag}-${el.class}`;\n          if (!res[prop]) {\n            res[prop] = new Array(resultStructure.length);\n            res[prop].fill('');\n          }\n        });\n        return res;\n      }, {});\n\n      // Fill the result structure\n      resultStructure.forEach((rel, i) => {\n        rel.forEach(el => {\n          const prop = `${el.tag}-${el.class}`;\n          if (!uniqueStructure[prop][i]) uniqueStructure[prop][i] = el.value;\n        });\n      });\n\n      let csv = '';\n\n      if (headless) {\n        csv += Object.keys(uniqueStructure).map((_, i) => `-${i}-`).join('§') + '\\n';\n      }\n\n      csv += resultStructure.map((_, i) => {\n        return Object.keys(uniqueStructure).map(key => {\n          return (uniqueStructure[key][i] || '').replace(/§/g, ' ').replace(/\\n/g, ' ');\n        }).join('§');\n      }).join('\\n');\n\n      return [ csv, log ];\n    }\n  }\n  catch(e) {\n    log.push(e.toString());\n    return [ '', log, e.toString() ];\n  }\n}, text, hasHeader == 'yes');\n\nif (error) throw error;\n\nawait page.screenshot({ path: `screenshot.jpg`, fullPage: true });\n\nawait page.close();\nawait browser.close();\n\nconst dsvParser = d3.dsvFormat('§');\ndata = dsvParser.parse(table);\n\nconst contents = fs.readFileSync('screenshot.jpg', {encoding: 'base64'});\nscreenshot = 'data:image/jpg;base64,' + contents;\n",
    "903": "/**\n  output: [html]\n  params:\n    - name: x\n      label: x\n    - name: y\n      label: y\n    - name: type\n      label: Type\n      value:\n        - control: select\n          value: normal\n          values:\n            - name: normal\n              label: Normal\n            - name: stacked\n              label: Stacked\n    - name: orientation\n      label: Orientation\n      value:\n        - control: select\n          value: vertical\n          values:\n            - name: vertical\n              label: Vertical\n            - name: horizontal\n              label: Horizontal\n  deps: [\n    'chart-utils.js',\n    'https://cdn.jsdelivr.net/npm/d3@6',\n    'https://cdn.jsdelivr.net/npm/@observablehq/plot@0.1',\n  ]\n**/\n \nif (y && !Array.isArray(y)) y = [y];\nif (!y) y = [];\n\nconst chartdata = x && y.length\n ? y.reduce((res, yv, i) => {\n     data.forEach(v => {\n       res.push({\n         x: v[x],\n         y: convert(v[yv]),\n         z: `y${i}`,\n       });\n     });\n     return res;\n   }, [])\n : [];\n\nconst distAxis = orientation === \"vertical\" ? \"x\" : \"y\";\nconst valueAxis = orientation === \"vertical\" ? \"y\" : \"x\";\n\nconst distAxisName = distAxis.toUpperCase();\nconst valueAxisName = valueAxis.toUpperCase();\n\nconst group = type === 'stacked'\n  ? Plot.groupZ(\n      { [valueAxis]: \"sum\" },\n      { [distAxis]: \"z\", [valueAxis]: \"y\", fill: \"z\" }\n    )\n  : Plot[`group${distAxisName}`](\n      { [valueAxis]: \"sum\" },\n      { [distAxis]: \"z\", [valueAxis]: \"y\", fill: \"z\" }\n    );\n\nconst marks = x && y.length ? [Plot[`bar${valueAxisName}`](chartdata, group)] : [];\n\nhtml.appendChild(Plot.plot({\n  marks,\n  [distAxis]: {\n    axis: null,\n  },\n  [valueAxis]: {\n    grid: true,\n    tickFormat: (d) => (d > 1000 ? d3.format('~s')(d) : d),\n  },\n  facet: {\n    data: chartdata,\n    [distAxis]: \"x\",\n  },\n  [`f${distAxis}`]: {\n    label: null,\n  },\n  width: html.clientWidth,\n  height: html.clientHeight,\n  style: {\n    background: hal9.isDark() ? \"#222\" : '',\n    color: hal9.isDark() ? \"white\" : ''\n  },\n}));\n",
    "10000": "/**\n  output: [html]\n  params:\n    - name: x\n      label: x\n    - name: y\n      label: y\n  deps: [\n    'https://cdn.jsdelivr.net/npm/d3@6',\n    'https://cdn.jsdelivr.net/npm/@observablehq/plot@0.1',\n  ]\n  author: analyzer2004\n**/\n\nif (y && !Array.isArray(y)) y = [y];\nif (!y) y = [];\n\nconst totalIdx = data.length - 1;\n\nfmt = n => d3.format(\",d\")(n)\n\nplotLabel = (data, dy) => \n  Plot.text(data, {\n    x: \"x\",\n    y: \"accu\",\n    dy: dy,\n    fontWeight: \"bold\",\n    text: d => d3.format(\".2s\")(d.accu)\n  })\n\nlet last = 0, accu = 0;  \nconst waterfall = data.map((d, i) => {\n  last = accu;\n  accu += d[y];\n  return {\n    x: d[x],\n    nextX: i < totalIdx ? data[i + 1][x] : \"Total\",\n    prior: last,\n    accu: accu,\n    delta: d[y]\n  }    \n});\n\nwaterfall.push({\n  x: \"Total\",\n  nextX: null,\n  prior: 0,\n  accu: accu,\n  delta: 0\n});\n\nconst chartdata = x && y.length\n ? y.reduce((res, yv, i) => {\n     data.forEach(v => {\n       res.push({\n         x: v.x,\n         y: parseFloat(v[yv]),\n         z: `y${i}`,\n       });\n     });\n     return res;\n   }, [])\n : [];\n\nconst colorDomain = [\"Increase\", \"Decrease\", \"Total\"];\nconst colorRange = [\"#649334\", \"#cc392b\", \"#1f77b4\"];\n  \nconst plot = Plot.plot({\n  width: html.clientWidth,\n  height: html.clientHeight,\n  x: {\n    align: 0,    \n    round: false,\n    domain: waterfall.map(d => d.x)\n  },\n  y: {\n    grid: true,\n    nice: true,      \n    label: \"\",      \n    tickFormat: d3.format(\".2s\")\n  },\n  color: {\n    domain: colorDomain,\n    range: colorRange\n  },\n  marks: [   \n    Plot.barY(waterfall, {\n      x: \"x\",\n      y1: \"prior\",\n      y2: \"accu\",        \n      fill: d => d.x === \"Total\" ? \"Total\" : d.delta >= 0 ? \"Increase\" : \"Decrease\",\n    }),\n    Plot.ruleY(waterfall, {\n      x1: \"x\",\n      x2: \"nextX\",\n      y: \"accu\",        \n      strokeDasharray: \"1.5\"\n    }),\n    Plot.ruleY([0], {strokeDasharray: \"1.5\"}),\n    plotLabel(waterfall.filter(d => d.delta >= 0), \"-0.5em\"),\n    plotLabel(waterfall.filter(d => d.delta < 0), \"1.5em\")\n  ],\n  style: {\n    background: hal9.isDark() ? \"#222\" : '',\n    color: hal9.isDark() ? \"#aaa\" : ''\n  },\n})\n  \nhtml.appendChild(plot);\n",
    "10001": "/**\n  params:\n    - name: field\n      label: Field\n    - name: order\n      label: Order\n      value:\n        - control: select\n          value: asc\n          values:\n            - name: asc\n              label: Ascending\n            - name: desc\n              label: Descending\n**/\n\nif (field == undefined) field = []\nif (!Array.isArray(field)) field = [ field ];\n \ndata.sort(function(a,b) {\n  var result = 0\n  for (let i = 0; i < field.length; i++) {\n    var left = a[field[i]];\n    var right = b[field[i]];\n    result = order == 'asc' ? left - right : right - left;\n    if (result != 0) break\n  }\n  return result;\n})",
    "10002": "/**\n  output: [html]\n  params:\n    - name: x\n      label: x\n    - name: y\n      label: y\n    - name: type\n      label: Type\n      value:\n        - control: select\n          value: normal\n          values:\n            - name: normal\n              label: Normal\n            - name: stacked\n              label: Stacked\n    - name: orientation\n      label: Orientation\n      value:\n        - control: select\n          value: vertical\n          values:\n            - name: vertical\n              label: Vertical\n            - name: horizontal\n              label: Horizontal\n  deps: [\n    'chart-utils.js',\n    'https://cdn.jsdelivr.net/npm/d3@6',\n    'https://cdn.jsdelivr.net/npm/@observablehq/plot@0.1',\n  ]\n**/\n \nif (y && !Array.isArray(y)) y = [y];\nif (!y) y = [];\n\nconst chartdata = x && y.length\n ? y.reduce((res, yv, i) => {\n     data.forEach(v => {\n       res.push({\n         x: v[x],\n         y: convert(v[yv]),\n         z: `y${i}`,\n       });\n     });\n     return res;\n   }, [])\n : [];\n\nconst distAxis = orientation === \"vertical\" ? \"x\" : \"y\";\nconst valueAxis = orientation === \"vertical\" ? \"y\" : \"x\";\n\nconst distAxisName = distAxis.toUpperCase();\nconst valueAxisName = valueAxis.toUpperCase();\n\nconst group = type === 'stacked'\n  ? Plot.groupZ(\n      { [valueAxis]: \"sum\" },\n      { [distAxis]: \"z\", [valueAxis]: \"y\", fill: \"z\" }\n    )\n  : Plot[`group${distAxisName}`](\n      { [valueAxis]: \"sum\" },\n      { [distAxis]: \"z\", [valueAxis]: \"y\", fill: \"z\" }\n    );\n\nconst marks = x && y.length ? [Plot[`bar${valueAxisName}`](chartdata, group)] : [];\n\nhtml.appendChild(Plot.plot({\n  marks,\n  [distAxis]: {\n    axis: null,\n  },\n  [valueAxis]: {\n    grid: true,\n    tickFormat: (d) => (d > 1000 ? d3.format('~s')(d) : d),\n  },\n  facet: {\n    data: chartdata,\n    [distAxis]: \"x\",\n  },\n  [`f${distAxis}`]: {\n    label: null,\n  },\n  width: html.clientWidth,\n  height: html.clientHeight,\n  style: {\n    background: hal9.isDark() ? \"#222\" : '',\n    color: hal9.isDark() ? \"white\" : ''\n  },\n}));\n"
  },
  "version": "0.0.1",
  "state": {
    "steps": {}
  }
}
